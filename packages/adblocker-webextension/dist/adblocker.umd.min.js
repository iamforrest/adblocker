!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("tldts-experimental"),require("@cliqz/adblocker")):"function"==typeof define&&define.amd?define(["exports","tldts-experimental","@cliqz/adblocker"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).adblocker={},e.tldtsExperimental,e.adblocker)}(this,(function(e,t,s){"use strict";const n=!function(){try{return-1!==navigator.userAgent.indexOf("Firefox")}catch(e){return!1}}();function i(e){const t=e.initiator||e.originUrl||e.documentUrl;return s.Request.fromRawDetails(t?{_originalRequestDetails:e,requestId:e.requestId,sourceUrl:t,tabId:e.tabId,type:e.type,url:e.url}:{_originalRequestDetails:e,requestId:e.requestId,tabId:e.tabId,type:e.type,url:e.url})}function r(e,t){if(void 0===t)return{};let s=e.responseHeaders||[];const n="content-security-policy";return s.forEach((({name:e,value:s})=>{e.toLowerCase()===n&&(t+=`; ${s}`)})),s=s.filter((({name:e})=>e.toLowerCase()!==n)),s.push({name:n,value:t}),{responseHeaders:s}}function o(e,{id:t},n){const i=e(t),r=new TextDecoder,o=new TextEncoder,a=new s.StreamingHtmlFilter(n),d=e=>{try{const e=a.write(r.decode())+a.flush();0!==e.length&&i.write(o.encode(e))}catch(e){console.error("Failed to flush HTML filterer",e)}void 0!==e.data&&i.write(e.data),i.disconnect()};i.ondata=e=>{if(!1===s.isUTF8(new Uint8Array(e.data)))return d(e);try{i.write(o.encode(a.write(r.decode(e.data,{stream:!0}))))}catch(t){return d(e)}},i.onstop=()=>{d({})}}class a{constructor(e,t){var s;this.browser=e,this.blocker=t,this.onBeforeRequest=s=>t.onBeforeRequest(e,s),this.onHeadersReceived=s=>t.onHeadersReceived(e,s),this.onRuntimeMessage=(s,n)=>t.onRuntimeMessage(e,s,n),!0===this.blocker.config.enablePushInjectionsOnNavigationEvents&&n&&((null===(s=this.browser.webNavigation)||void 0===s?void 0:s.onCommitted)?this.onCommittedHandler=s=>t.onCommittedHandler(e,s):console.warn('Consider adding the "webNavigation" permission in the manifest to improve the reliability of the adblocker. If you do not want to see this warning, turn off the "enablePushInjectionsOnNavigationEvents" flag.'))}enable(){!0===this.blocker.config.loadNetworkFilters&&void 0!==this.browser.webRequest&&(this.browser.webRequest.onBeforeRequest.addListener(this.onBeforeRequest,{urls:["<all_urls>"]},["blocking"]),this.browser.webRequest.onHeadersReceived.addListener(this.onHeadersReceived,{urls:["<all_urls>"],types:["main_frame"]},["blocking","responseHeaders"])),!0===this.blocker.config.loadCosmeticFilters&&void 0!==this.browser.runtime&&void 0!==this.browser.runtime.onMessage&&this.browser.runtime.onMessage.addListener(this.onRuntimeMessage),this.onCommittedHandler&&this.browser.webNavigation.onCommitted.addListener(this.onCommittedHandler)}disable(){void 0!==this.browser.webRequest&&(this.browser.webRequest.onBeforeRequest.removeListener(this.onBeforeRequest),this.browser.webRequest.onHeadersReceived.removeListener(this.onHeadersReceived)),void 0!==this.browser.runtime&&void 0!==this.browser.runtime.onMessage&&this.browser.runtime.onMessage.removeListener(this.onRuntimeMessage),this.onCommittedHandler&&this.browser.webNavigation.onCommitted.removeListener(this.onCommittedHandler)}get pushInjectionsActive(){return void 0!==this.onCommittedHandler}}class d extends s.FiltersEngine{constructor(){super(...arguments),this.contexts=new WeakMap,this.handleRuntimeMessage=async(e,s,n,i)=>{var r,o;const a=[];if("getCosmeticsFilters"!==s.action)return;if(void 0===n.tab)throw new Error('required "sender.tab" information is not available');if(void 0===n.tab.id)throw new Error('required "sender.tab.id" information is not available');if(void 0===n.frameId)throw new Error('required "sender.frameId" information is not available');const{url:d="",frameId:l}=n,c=t.parse(d),u=c.hostname||"",m=c.domain||"";if(0===l&&"start"===s.lifecycle){const{active:t,styles:i}=this.getCosmeticsFilters({domain:m,hostname:u,url:d,classes:s.classes,hrefs:s.hrefs,ids:s.ids,getBaseRules:!0,getInjectionRules:!1,getExtendedRules:!1,getRulesFromDOM:!1,getRulesFromHostname:!1,callerContext:{tabId:null===(r=n.tab)||void 0===r?void 0:r.id,frameId:n.frameId}});if(!1===t)return;a.push(this.injectStylesWebExtension(e,i,{tabId:n.tab.id,allFrames:!0}))}{const{active:t,styles:r,scripts:c,extended:h}=this.getCosmeticsFilters({domain:m,hostname:u,url:d,classes:s.classes,hrefs:s.hrefs,ids:s.ids,getBaseRules:!1,getInjectionRules:"start"===s.lifecycle,getExtendedRules:"start"===s.lifecycle,getRulesFromHostname:"start"===s.lifecycle,getRulesFromDOM:"dom-update"===s.lifecycle,callerContext:{tabId:null===(o=n.tab)||void 0===o?void 0:o.id,frameId:n.frameId}});if(!1===t)return;a.push(this.injectStylesWebExtension(e,r,{tabId:n.tab.id,frameId:l})),0===c.length||this.pushInjectionsActive(e)||i({active:t,extended:h,scripts:c,styles:""})}await Promise.all(a)},this.onBeforeRequest=(e,t)=>{const s=i(t);if(!0===this.config.guessRequestTypeFromUrl&&"other"===s.type&&s.guessTypeOfRequest(),s.isMainFrame())return this.performHTMLFiltering(e,s),{};const{redirect:n,match:r}=this.match(s);return void 0!==n?{redirectUrl:n.dataUrl}:!0===r?{cancel:!0}:{}},this.onHeadersReceived=(e,t)=>r(t,this.getCSPDirectives(i(t))),this.onRuntimeMessage=(e,t,s)=>new Promise(((n,i)=>{this.handleRuntimeMessage(e,t,s,n).catch(i).finally((()=>n({})))}))}enableBlockingInBrowser(e){let t=this.contexts.get(e);return void 0!==t||(t=new a(e,this),this.contexts.set(e,t),t.enable()),t}disableBlockingInBrowser(e){const t=this.contexts.get(e);if(void 0===t)throw new Error("Trying to disable blocking which was not enabled");this.contexts.delete(e),t.disable()}onCommittedHandler(e,s){const{hostname:n,domain:i}=t.parse(s.url);if(!n)return;const{active:r,scripts:o}=this.getCosmeticsFilters({url:s.url,hostname:n,domain:i||"",getBaseRules:!1,getInjectionRules:!0,getExtendedRules:!1,getRulesFromDOM:!1,getRulesFromHostname:!0,callerContext:{tabId:s.tabId,frameId:s.frameId}});!1!==r&&o.length>0&&this.executeScriptlets(e,s,o)}isBlockingEnabled(e){return this.contexts.has(e)}pushInjectionsActive(e){const t=this.contexts.get(e);return!!t&&t.pushInjectionsActive}performHTMLFiltering(e,t){if(!0===this.config.enableHtmlFiltering&&void 0!==e.webRequest&&void 0!==e.webRequest.filterResponseData&&!0===t.isMainFrame()&&"undefined"!=typeof TextDecoder&&"undefined"!=typeof TextEncoder){const s=this.getHtmlFilters(t);0!==s.length&&o(e.webRequest.filterResponseData,t,s)}}async injectStylesWebExtension(e,t,{tabId:s,frameId:n,allFrames:i=!1}){if(0!==t.length){if(void 0===e.tabs)throw new Error('required "tabs" API is not defined');if(void 0===e.tabs.insertCSS)throw new Error('required "tabs.insertCSS" API is not defined');return e.tabs.insertCSS(s,n?{allFrames:i,code:t,cssOrigin:"user",frameId:n,matchAboutBlank:!0,runAt:"document_start"}:{allFrames:i,code:t,cssOrigin:"user",matchAboutBlank:!0,runAt:"document_start"})}}executeScriptlets(e,t,s){let n;n=this.config.debug?e=>`console.log('[ADBLOCKER-DEBUG]:', ${JSON.stringify(e)});`:()=>"";const i=`(function(){\n${n('run scriptlets (executing in "page world")')}\n${s.join("\n\n")}}\n)()`,r=`\n(function(code) {\n    ${n('run injection wrapper (executing in "content script world")')}\n    var script;\n    try {\n      script = document.createElement('script');\n      script.appendChild(document.createTextNode(decodeURIComponent(code)));\n      (document.head || document.documentElement).appendChild(script);\n    } catch (ex) {\n      console.error('Failed to run script', ex);\n    }\n    if (script) {\n        if (script.parentNode) {\n          script.parentNode.removeChild(script);\n        }\n        script.textContent = '';\n    }\n})(\`${encodeURIComponent(i)}\`);`;e.tabs.executeScript(t.tabId,{code:r,runAt:"document_start",frameId:t.frameId,matchAboutBlank:!0}).catch((e=>{console.error("Failed to inject scriptlets",e)}))}}e.BlockingContext=a,e.WebExtensionBlocker=d,e.filterRequestHTML=o,e.fromWebRequestDetails=i,e.updateResponseHeadersWithCSP=r,Object.keys(s).forEach((function(t){"default"===t||Object.prototype.hasOwnProperty.call(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:function(){return s[t]}})}))}));
//# sourceMappingURL=adblocker.umd.min.js.map
